<?php

define('SYSTEMIX_DATATABLES_LIBRARY_VERSION', '1.10.19');

/**
 * Implements hook_theme().
 */
function systemix_datatables_theme() {
  return array(
    'systemix_datatables' => array(
      'variables' => array(
        'header' => NULL,
        'rows' => NULL,
        'attributes' => NULL,
        'caption' => NULL,
      ),
    ),
  );
}


/**
 * Implements hook_library().
 */
function systemix_datatables_library() {
    $version = SYSTEMIX_DATATABLES_LIBRARY_VERSION;
    $path = drupal_get_path('module', 'systemix_datatables');
    $library_path = $path . '/vendor/datatables/'. $version;
    $libraries['systemix.datatables'] = [
        'title' => 'Systemix Datatables',
        'website' => 'https://github.com/ijortengab/drupal7-systemix',
        'version' => $version,
        'js' => [
            $library_path.'/js/jquery.dataTables.min.js' => ['group' => JS_LIBRARY],
            $library_path.'/js/dataTables.bootstrap.min.js' => ['group' => JS_LIBRARY],
            $path.'/js/systemix-datatables.js' => ['group' => JS_DEFAULT],
        ],
        'css' => [
            // $library_path.'/css/jquery.dataTables.min.css' => ['group' => CSS_DEFAULT],
            $library_path.'/css/dataTables.bootstrap.min.css' => ['group' => CSS_DEFAULT],
        ],
    ];
    return $libraries;
}


/**
 * Implements hook_views_api().
 */
function systemix_datatables_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'systemix_datatables') . '/views',
  );
}



/**
 * Implements hook_views_ajax_data_alter().
 */
function systemix_datatables_views_ajax_data_alter(&$commands, $view) {
    $commands[] = [
        'command' => 'systemixDatatablesRedraw',
        'key' => 'views_dom_id:' . $view->dom_id,
    ];
}

function systemix_datatables_ajax_render_alter(&$commands) {
    $settings_exists = false;
    $command_exists = false;
    foreach ($commands as $key => $value) {
        if (isset($value['settings']['systemixDatatables'])) {
            $settings_exists = $key;
        }
        if (isset($value['command']) && $value['command'] == 'systemixDatatablesRedraw') {
            $command_exists = $key;
        }
    }
    if ($settings_exists !== false && $command_exists !== false) {
        $key = $commands[$command_exists]['key'];
        $settings = $commands[$settings_exists]['settings']['systemixDatatables'][$key];
        unset($commands[$settings_exists]['settings']['systemixDatatables'][$key]);
        if (empty($commands[$settings_exists]['settings']['systemixDatatables'])) {
            // Paksa agar return json adalah object.
            unset($commands[$settings_exists]['settings']['systemixDatatables']);
        }
        $commands[$command_exists]['settings'] = $settings;
    }
}

function template_preprocess_systemix_datatables_view(&$variables) {
  $view     = $variables['view'];

  // We need the raw data for this grouping, which is passed in as
  // $variables['rows']. However, the template also needs to use for the rendered
  // fields. We therefore swap the raw data out to a new variable and reset
  // $variables['rows'] so that it can get rebuilt. Store rows so that they may be
  // used by further preprocess functions.
  $result   = $variables['result'] = $variables['rows'];
  $variables['rows'] = array();
  $variables['field_classes'] = array();
  $variables['header'] = array();
  $variables['classes_array'] = array();

  $options  = $view->style_plugin->options;
  $handler  = $view->style_plugin;

  if (!empty($handler->options['class'])) {
    $classes = explode(' ', $handler->options['class']);
    $classes = array_map('views_clean_css_identifier', $classes);

    if (!empty($classes)) {
      // Trim empty class entries.
      foreach ($classes as $key => $class) {
        if (!empty($class)) {
          $variables['classes_array'][] = $class;
        }
      }
    }
  }

  $default_row_class = isset($options['default_row_class']) ? $options['default_row_class'] : TRUE;
  $row_class_special = isset($options['row_class_special']) ? $options['row_class_special'] : TRUE;

  $fields   = &$view->field;
  $columns  = $handler->sanitize_columns($options['columns'], $fields);

  $active   = !empty($handler->active) ? $handler->active : '';
  $order    = !empty($handler->order) ? $handler->order : 'asc';

  $query    = tablesort_get_query_parameters();
  if (isset($view->exposed_raw_input)) {
    $query += $view->exposed_raw_input;
  }

  // Fields must be rendered in order as of Views 2.3, so we will pre-render
  // everything.
  $renders = $handler->render_fields($result);

  foreach ($columns as $field => $column) {
    // Create a second variable so we can easily find what fields we have and
    // what the CSS classes should be.
    $variables['fields'][$field] = drupal_clean_css_identifier($field);
    if ($active == $field) {
      $variables['fields'][$field] .= ' active';
    }

    // Render the header labels.
    if ($field == $column && empty($fields[$field]->options['exclude'])) {
      $label = check_plain(!empty($fields[$field]) ? $fields[$field]->label() : '');
      if (empty($options['info'][$field]['sortable']) || !$fields[$field]->click_sortable()) {
        $variables['header'][$field] = $label;
      }
      else {
        $initial = !empty($options['info'][$field]['default_sort_order']) ? $options['info'][$field]['default_sort_order'] : 'asc';

        if ($active == $field) {
          $initial = ($order == 'asc') ? 'desc' : 'asc';
        }

        $title = t('sort by @s', array('@s' => $label));
        if ($active == $field) {
          $label .= theme('tablesort_indicator', array('style' => $initial));
        }

        $query['order'] = $field;
        $query['sort'] = $initial;
        $link_options = array(
          'html' => TRUE,
          'attributes' => array('title' => $title),
          'query' => $query,
        );
        $variables['header'][$field] = l($label, $_GET['q'], $link_options);
      }

      $variables['header_classes'][$field] = '';
      #// Set up the header label class.
      if ($fields[$field]->options['element_default_classes']) {
        $variables['header_classes'][$field] .= "views-field views-field-" . $variables['fields'][$field];
      }
      $class = $fields[$field]->element_label_classes(0);
      if ($class) {
        if ($variables['header_classes'][$field]) {
          $variables['header_classes'][$field] .= ' ';
        }
        $variables['header_classes'][$field] .= $class;
      }
      #// Add a CSS align class to each field if one was set.
      if (!empty($options['info'][$field]['align'])) {
        $variables['header_classes'][$field] .= ' ' . drupal_clean_css_identifier($options['info'][$field]['align']);
      }

      // Add a header label wrapper if one was selected.
      if ($variables['header'][$field]) {
        $element_label_type = $fields[$field]->element_label_type(TRUE, TRUE);
        if ($element_label_type) {
          $variables['header'][$field] = '<' . $element_label_type . '>' . $variables['header'][$field] . '</' . $element_label_type . '>';
        }
      }
    }

    // Add a CSS align class to each field if one was set.
    if (!empty($options['info'][$field]['align'])) {
      $variables['fields'][$field] .= ' ' . drupal_clean_css_identifier($options['info'][$field]['align']);
    }

    // Render each field into its appropriate column.
    foreach ($result as $num => $row) {
      #// Add field classes.
      // $variables['field_classes'][$field][$num] = '';
      // if ($fields[$field]->options['element_default_classes']) {
        // $variables['field_classes'][$field][$num] = "views-field views-field-" . $variables['fields'][$field];
      // }
      // if ($classes = $fields[$field]->element_classes($num)) {
        // if ($variables['field_classes'][$field][$num]) {
          // $variables['field_classes'][$field][$num] .= ' ';
        // }

        // $variables['field_classes'][$field][$num] .= $classes;
      // }
      #// $variables['field_attributes'][$field][$num] = array();

      if (!empty($fields[$field]) && empty($fields[$field]->options['exclude'])) {
        $field_output = $renders[$num][$field];
        $element_type = $fields[$field]->element_type(TRUE, TRUE);
        if ($element_type) {
          $field_output = '<' . $element_type . '>' . $field_output . '</' . $element_type . '>';
        }

        // Don't bother with separators and stuff if the field does not show up.
        if (empty($field_output) && !empty($variables['rows'][$num][$column])) {
          continue;
        }

        // Place the field into the column, along with an optional separator.
        if (!empty($variables['rows'][$num][$column])) {
          if (!empty($options['info'][$column]['separator'])) {
            $variables['rows'][$num][$column] .= filter_xss_admin($options['info'][$column]['separator']);
          }
        }
        else {
          $variables['rows'][$num][$column] = '';
        }

        $variables['rows'][$num][$column] .= $field_output;
      }
    }

    // Remove columns if the option is hide empty column is checked and the
    // field is not empty.
    if (!empty($options['info'][$field]['empty_column'])) {
      $empty = TRUE;
      foreach ($variables['rows'] as $num => $columns) {
        $empty &= empty($columns[$column]);
      }
      if ($empty) {
        foreach ($variables['rows'] as $num => &$column_items) {
          unset($column_items[$column]);
          unset($variables['header'][$column]);
        }
      }
    }
  }


  // Hide table header if all labels are empty.
  if (!array_filter($variables['header'])) {
    $variables['header'] = array();
  }
    $json = [
        'columns' => [],
        'data' => [],
    ];

    foreach ($variables['header'] as $key => $value) {
        $json['columns'][] = ['title' => $value];
    }

    foreach ($variables['rows'] as $key => $value) {
        $json['data'][] = array_values($value);
    }
    $variables['id'] = drupal_html_id('systemix-datatables');
    $variables['classes_array'][] ='table';
    $variables['classes_array'][] ='table-striped';
    $variables['classes_array'][] ='table-bordered';
    $variables['classes_array'][] ='table-hover';
    $variables['classes_array'][] ='systemix-datatables';
    // @ref: https://datatables.net/examples/basic_init/flexible_width.html
    $variables['attributes_array']['style'] = 'width:100%;';


    // $dom_id = $;


    drupal_add_library('systemix_datatables', 'systemix.datatables');
    $settings = [
        'systemixDatatables' => [
            'views_dom_id:' . $view->dom_id => [
                'dom_id' => $view->dom_id,
                'options' => $json,
            ],
        ],
    ];
    $javascript = drupal_add_js($settings, array('type' => 'setting'));




    // DEBUG_BACKTRACE_IGNORE_ARGS
    // $_vars = $variables;
    // $_vars['view'] = null;
    // $_vars['options'] = null;
    // $_vars['result'] = null;
    // $_vars['rows'] = null;
    // $_vars['user'] = null;


    // $header = $variables['header'];
    // $rows = $variables['rows'];


  // $count = 0;
  // foreach ($variables['rows'] as $num => $row) {
    // $variables['row_classes'][$num] = array();
    // if ($row_class_special) {
      // $variables['row_classes'][$num][] = ($count++ % 2 == 0) ? 'odd' : 'even';
    // }
    // if ($row_class = $handler->get_row_class($num)) {
      // $variables['row_classes'][$num][] = $row_class;
    // }
  // }

  // if ($row_class_special) {
    // $variables['row_classes'][0][] = 'views-row-first';
    // $variables['row_classes'][count($variables['row_classes']) - 1][] = 'views-row-last';
  // }

  // $variables['classes_array'][] = 'views-table';
  // if (empty($variables['rows']) && !empty($options['empty_table'])) {
    // $variables['rows'][0][0] = $view->display_handler->render_area('empty');
    // # // Calculate the amounts of rows with output.
    // $variables['field_attributes'][0][0]['colspan'] = count($variables['header']);
    // $variables['field_classes'][0][0] = 'views-empty';
  // }

  // if (!empty($options['sticky'])) {
    // drupal_add_js('misc/tableheader.js');
    // $variables['classes_array'][] = "sticky-enabled";
  // }
  // $variables['classes_array'][] = 'cols-' . count($variables['header']);

  // Add the summary to the list if set.
  if (!empty($handler->options['summary'])) {
    $variables['attributes_array'] = array('summary' => filter_xss_admin($handler->options['summary']));
  }

  // Add the caption to the list if set.
  if (!empty($handler->options['caption'])) {
    $variables['caption'] = filter_xss_admin($handler->options['caption']);
  }
  else {
    $variables['caption'] = '';
  }
}


/*
LAMPIRAN 01
<pre>systemix_datatables.module:44 (Time: 2019-06-20T13:42:35+07:00, Direktori: /var/www/git/ijortengab/drupal7-systemix/modules/systemix_datatables)
var_dump(counter): object(views_handler_field_counter)#129 (19) {
  ["field_alias"]=>
  string(7) "unknown"
  ["aliases"]=>
  array(0) {
  }
  ["original_value"]=>
  int(5)
  ["additional_fields"]=>
  array(0) {
  }
  ["view"]=>
  &NULL
  ["query"]=>
  &NULL
  ["handler_type"]=>
  string(5) "field"
  ["table_alias"]=>
  NULL
  ["real_field"]=>
  string(7) "counter"
  ["relationship"]=>
  NULL
  ["options"]=>
  array(23) {
    ["id"]=>
    string(7) "counter"
    ["table"]=>
    string(5) "views"
    ["field"]=>
    string(7) "counter"
    ["relationship"]=>
    string(4) "none"
    ["group_type"]=>
    string(5) "group"
    ["ui_name"]=>
    string(0) ""
    ["label"]=>
    string(0) ""
    ["exclude"]=>
    int(0)
    ["alter"]=>
    array(27) {
      ["alter_text"]=>
      int(0)
      ["text"]=>
      string(0) ""
      ["make_link"]=>
      int(0)
      ["path"]=>
      string(0) ""
      ["absolute"]=>
      int(0)
      ["external"]=>
      int(0)
      ["replace_spaces"]=>
      int(0)
      ["unwanted_characters"]=>
      string(0) ""
      ["path_case"]=>
      string(4) "none"
      ["trim_whitespace"]=>
      int(0)
      ["alt"]=>
      string(0) ""
      ["rel"]=>
      string(0) ""
      ["link_class"]=>
      string(0) ""
      ["prefix"]=>
      string(0) ""
      ["suffix"]=>
      string(0) ""
      ["target"]=>
      string(0) ""
      ["nl2br"]=>
      int(0)
      ["max_length"]=>
      string(0) ""
      ["word_boundary"]=>
      int(1)
      ["ellipsis"]=>
      int(1)
      ["more_link"]=>
      int(0)
      ["more_link_text"]=>
      string(0) ""
      ["more_link_path"]=>
      string(0) ""
      ["strip_tags"]=>
      int(0)
      ["trim"]=>
      int(0)
      ["preserve_tags"]=>
      string(0) ""
      ["html"]=>
      int(0)
    }
    ["element_type"]=>
    string(0) ""
    ["element_class"]=>
    string(0) ""
    ["element_label_type"]=>
    string(0) ""
    ["element_label_class"]=>
    string(0) ""
    ["element_label_colon"]=>
    bool(false)
    ["element_wrapper_type"]=>
    string(0) ""
    ["element_wrapper_class"]=>
    string(0) ""
    ["element_default_classes"]=>
    int(1)
    ["empty"]=>
    string(0) ""
    ["hide_empty"]=>
    int(0)
    ["empty_zero"]=>
    int(0)
    ["hide_alter_empty"]=>
    int(1)
    ["counter_start"]=>
    string(1) "1"
    ["reverse"]=>
    int(0)
  }
  ["definition"]=>
  array(4) {
    ["handler"]=>
    string(27) "views_handler_field_counter"
    ["group"]=>
    string(6) "Global"
    ["title"]=>
    string(19) "View result counter"
    ["help"]=>
    string(47) "Displays the actual position of the view result"
  }
  ["is_handler"]=>
  bool(true)
  ["localization_keys"]=>
  array(4) {
    [0]=>
    string(7) "default"
    [1]=>
    string(5) "field"
    [2]=>
    string(5) "views"
    [3]=>
    string(7) "counter"
  }
  ["table"]=>
  string(5) "views"
  ["field"]=>
  string(7) "counter"
  ["position"]=>
  int(0)
  ["last_render"]=>
  string(1) "5"
  ["last_render_text"]=>
  int(5)
}
</pre>
 */

/*
LAMPIRAN 2

<pre>systemix_datatables.module:39 (Time: 2019-06-20T13:59:22+07:00, Direktori: /var/www/git/ijortengab/drupal7-systemix/modules/systemix_datatables)
var_dump(_rows_0): object(stdClass)#245 (7) {
  ["nid"]=>
  string(4) "2705"
  ["node_created"]=>
  string(10) "1556506092"
  ["field_data_nama_node_entity_type"]=>
  string(4) "node"
  ["field_data_npwp_node_entity_type"]=>
  string(4) "node"
  ["_field_data"]=>
  array(1) {
    ["nid"]=>
    array(2) {
      ["entity_type"]=>
      string(4) "node"
      ["entity"]=>
      string(11) "node_load()"
    }
  }
  ["field_nama"]=>
  array(1) {
    [0]=>
    array(2) {
      ["rendered"]=>
      array(2) {
        ["#markup"]=>
        string(12) "BAYU WIRAWAN"
        ["#access"]=>
        bool(true)
      }
      ["raw"]=>
      array(3) {
        ["value"]=>
        string(12) "BAYU WIRAWAN"
        ["format"]=>
        NULL
        ["safe_value"]=>
        string(12) "BAYU WIRAWAN"
      }
    }
  }
  ["field_npwp"]=>
  array(1) {
    [0]=>
    array(2) {
      ["rendered"]=>
      array(2) {
        ["#markup"]=>
        string(15) "737189373412000"
        ["#access"]=>
        bool(true)
      }
      ["raw"]=>
      array(3) {
        ["value"]=>
        string(15) "737189373412000"
        ["format"]=>
        NULL
        ["safe_value"]=>
        string(15) "737189373412000"
      }
    }
  }
}
</pre>
 */